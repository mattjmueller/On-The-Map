//*********************************************************
// StudentLocation.swift
// On The Map
//
// Created by Matthew Mueller on 4/21/17.
// Copyright Â© 2017 Matthew Mueller. All rights reserved.
//*********************************************************

import Foundation

struct StudentLocation {
	let objectId: String
	let uniqueKey: String
	let firstName: String
	let lastName: String
	let location: Location
	let sharedURL: URL?
	
	var fullName: String {
		return firstName + " " + lastName
	}
}

extension StudentLocation {
	
	init?(jsonDict: [String: Any]) {
		guard let objectId = jsonDict["objectId"] as? String else { print("No objectID"); return nil }
		guard let uniqueKey = jsonDict["uniqueKey"] as? String else { print("No uniqueKey"); return nil }
		guard let firstName = jsonDict["firstName"] as? String else { print("No firstName"); return nil }
		guard let lastName = jsonDict["lastName"] as? String else { print("No lastName"); return nil }
		guard let latitude = jsonDict["latitude"] as? Double else { print("No latitude"); return nil }
		guard let longitude = jsonDict["longitude"] as? Double else { print("No longitude"); return nil }
		guard let locationName = jsonDict["mapString"] as? String else { print("No locationName"); return nil }
		let sharedURL = (jsonDict["mediaURL"] as? String).flatMap { URL(string: $0) }
		
		self.objectId = objectId
		self.uniqueKey = uniqueKey
		self.firstName = firstName
		self.lastName = lastName
		self.location = Location(name: locationName, latitude: latitude, longitude: longitude)
		self.sharedURL = sharedURL
	}
	
	static func locationsFromJson(jsonArray: [[String:Any]]) -> [StudentLocation]? {
		return jsonArray.flatMap { StudentLocation(jsonDict: $0) }
	}
}

/*
In Parse, each StudentLocation is represented as a collection of key/value pairs:

Key: objectId
Description: an auto-generated id/key generated by Parse which uniquely identifies a StudentLocation
Parse Type: String
Example Value: 8ZExGR5uX8

Key: uniqueKey
Description: an extra (optional) key used to uniquely identify a StudentLocation; you should populate this value using your Udacity account id
Parse Type: String
Example Value: 1234

Key: firstName
Description: the first name of the student which matches their Udacity profile first name
Parse Type: String
Example Value: John

Key: lastName
Description: the last name of the student which matches their Udacity profile last name
Parse Type: String
Example Value: Doe

Key: mapString
Description: the location string used for geocoding the student location
Parse Type: String
Example Value: Mountain View, CA

Key: mediaURL
Description: the URL provided by the student
Parse Type: String
Example Value: https://udacity.com

Key: latitude
Description: the latitude of the student location (ranges from -90 to 90)
Parse Type: Number
Example Value: 37.386052

Key: longitude
Description: the longitude of the student location (ranges from -180 to 180)
Parse Type: Number
Example Value: -122.083851

Key: createdAt
Description: the date when the student location was created
Parse Type: Date
Example Value: Feb 25, 2015, 01:10

Key: updatedAt
Description: the date when the student location was last updated
Parse Type: Date
Example Value: Mar 09, 2015, 23:34

Key: ACL
Description: the Parse access and control list (ACL), i.e. permissions, for this StudentLocation entry
Parse Type: ACL
Example Value: Public Read and Write

When you are parsing StudentLocations, the Parse Types can be casted into equivalent Swift types. Any value with the type "Number" may be casted into a floating-point value in Swift. YOU DO NOT HAVE TO WORRY ABOUT PARSING DATE OR ACL TYPES.
*/
